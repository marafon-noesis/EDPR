if (typeof Mobile == "undefined" || !Mobile) {
    var Mobile = {};
}

Mobile.namespace = function() {
    var args = arguments;
    var obj = null, i, j, k;
    for (i = 0; i < args.length; i++) {
        obj = Mobile;
        k = ("" + args[i]).split(".");
    }
    j = k[0] == "Mobile" ? 1 : 0;
    for (j; j < k.length; j++) {
        obj[k[j]] = obj[k[j]] || {};
        obj = obj[k[j]];
    }
    return obj;
};

Mobile.Sdk = Mobile.Sdk || function() {
    return {
        TRACE: false,
        VERSION: "5.1.10.1"
    };
}();

Mobile.namespace("Sdk.device");

Mobile.namespace("Sdk.core");

Mobile.Sdk.core.validationMessage = "Mobile.Sdk.core: input validation error. Invalid arguments passed to method '{0}'. \n	Method: {0} \n	Arguments: {1} \n	Reason: {2}";

Mobile.Sdk.core.logValidationMessage = function(methodName, argumentNames, reason) {
    Mobile.Sdk.core.logger.log(Mobile.Sdk.core.validationMessage.format(methodName, argumentNames, reason));
};

Mobile.Sdk.core.getQueryString = function() {
    var vars = [], hash, separatorIndex;
    var hashIndex = window.location.href.indexOf("#");
    var queryIndex = window.location.href.indexOf("?");
    if (hashIndex == -1) hashIndex = queryIndex;
    if (queryIndex == -1) queryIndex = hashIndex;
    separatorIndex = hashIndex < queryIndex ? hashIndex : queryIndex;
    var hashes = window.location.href.slice(separatorIndex + 1).split("&");
    for (var i = 0; i < hashes.length; i++) {
        hash = hashes[i].split("=");
        vars.push(hash[0]);
        vars[hash[0]] = hash[1];
    }
    return vars;
};

Mobile.Sdk.core.openEntityForm = function(entitytypename, id, entity, callback, userState) {
    var message, args;
    if (typeof entitytypename === "undefined" || entitytypename === null) {
        message = "Missing mandatory EntityTypeName parameter";
        Mobile.Sdk.core.logValidationMessage("core.openEntityForm", entitytypename, message);
        if (callback) callback({
            error: message,
            userState: userState
        });
        return;
    }
    if (Object.prototype.toString.call(entitytypename) != "[object String]") {
        message = "EntityTypeName is not a String.";
        Mobile.Sdk.core.logValidationMessage("core.openEntityForm", entitytypename, message);
        if (callback) callback({
            error: message,
            userState: userState
        });
        return;
    }
    if (entitytypename.trim() === "") {
        message = "Missing mandatory EntityTypeName parameter";
        Mobile.Sdk.core.logValidationMessage("core.openEntityForm", entitytypename, message);
        if (callback) callback({
            error: message,
            userState: userState
        });
        return;
    }
    var objecttypename = entitytypename.toLowerCase();
    id = id === undefined ? null : id;
    entity = entity === undefined ? null : entity;
    callback = callback === undefined ? null : callback;
    userState = userState === undefined ? null : userState;
    if (Object.prototype.toString.call(id) === "[object Object]") {
        args = Array.prototype.slice.call(arguments);
        id = null;
        entity = args[1] === undefined ? null : args[1];
        callback = args[2] === undefined ? null : args[2];
        userState = args[3] === undefined ? null : args[3];
    }
    if (Object.prototype.toString.call(id) === "[object Function]") {
        args = Array.prototype.slice.call(arguments);
        id = null;
        entity = null;
        callback = args[1] === undefined ? null : args[1];
        userState = args[2] === undefined ? null : args[2];
    }
    if (Object.prototype.toString.call(entity) === "[object Function]") {
        args = Array.prototype.slice.call(arguments);
        entity = null;
        callback = args[2] === undefined ? null : args[2];
        userState = args[3] === undefined ? null : args[3];
    }
    if (id !== null) {
        if (Object.prototype.toString.call(id) != "[object String]") {
            message = "Id is not a String.";
            Mobile.Sdk.core.logValidationMessage("core.openEntityForm", id, message);
            if (callback) callback({
                error: message,
                userState: userState
            });
            return;
        }
        if (/^(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}$/.test(id) === false) {
            message = "Id doesn't seem to be a valid GUID.";
            Mobile.Sdk.core.logValidationMessage("core.openEntityForm", id, message);
            if (callback) callback({
                error: message,
                userState: userState
            });
            return;
        }
    }
    if (callback !== null && Object.prototype.toString.call(callback) != "[object Function]") {
        message = "Callback is not a Function.";
        Mobile.Sdk.core.logValidationMessage("core.openEntityForm", callback, message);
        throw new Error(message);
    }
    if (callback === null && userState !== null) {
        Mobile.Sdk.core.logValidationMessage("core.openEntityForm", userState, "You are passing a userState, but not a valid callback function. The passed userState will be ignored.");
        userState = null;
    }
    if (Object.prototype.toString.call(id) === "[object String]" && /^(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}$/.test(id) === true && Object.prototype.toString.call(entity) === "[object Object]") {
        message = "You are passing a valid Id and an entity object. Ignoring the object and trying to open the existing record.";
        Mobile.Sdk.core.logValidationMessage("core.openEntityForm", entity, message);
        entity = null;
    }
    var options = {
        entitytypename: objecttypename,
        id: id,
        entity: entity,
        userState: userState,
        workMode: Mobile.Sdk.core.ui.WorkMode.DEFAULT
    };
    Mobile.Sdk.core.ui.openEntityForm(options, callback);
};

String.prototype.format = function() {
    var args = arguments;
    return this.replace(/{(\d+)}/g, function(match, number) {
        return typeof args[number] != "undefined" ? JSON.stringify(args[number]) : match;
    });
};

if (!String.prototype.trim) {
    String.prototype.trim = function() {
        return this.replace(/^\s+|\s+$/g, "");
    };
}

Mobile.namespace("Page");

Mobile.Page.logValidationMessage = function(methodName, fieldName, fieldType, argumentNames, entityName, entityId, reason) {
    Mobile.Sdk.core.logger.log(Mobile.Page.validationMessage.format(methodName, fieldName, fieldType, argumentNames, entityName, entityId, reason));
};

Mobile.Page.oneditmodechange = function(editMode) {};

Mobile.Page.getAttribute = function() {
    var argument = arguments[0];
    return Mobile.Page.data.entity.attributes.get(argument);
};

Mobile.Page.getControl = function() {
    var argument = arguments[0];
    return Mobile.Page.ui.controls.get(argument);
};

Mobile.Page.collection = function() {
    var col = function() {
        this.list = [];
        this.push = function(argument) {
            this.list.push(argument);
        };
        this.get = function(argument) {
            var i;
            if (typeof argument === "undefined") {
                return this.list.slice(0);
            }
            if (typeof argument === "string") {
                var control = null;
                for (i = 0; i < this.list.length; i++) {
                    var currentControl = this.list[i];
                    if (currentControl.name === argument) {
                        control = currentControl;
                        break;
                    }
                }
                return control;
            }
            if (typeof argument === "number") {
                if (argument >= this.list.length) {
                    Mobile.Sdk.core.logger.log("Unable to get item from Attribute or Control collection. Index out of range. Index: " + argument);
                    return null;
                } else {
                    return this.list[argument];
                }
            }
            if (typeof argument === "function") {
                var arr = [];
                for (i = 0; i < this.list.length; i++) {
                    if (argument(this.list[i], i)) arr.push(this.list[i]);
                }
                return arr;
            }
        };
        this.forEach = function(argument) {
            if (typeof argument != "function") {
                throw new TypeError();
            }
            this.list.forEach(argument);
        };
        this.getLength = function() {
            return this.list.length;
        };
    };
    return col;
}();

Mobile.Page.context = Mobile.Page.context || function() {
    var userId = null;
    return {
        getOrgLcid: function() {
            return Mobile.Sdk.core.execute("getOrgLcid");
        },
        getUserId: function() {
            return this.userId;
        },
        getUserLcid: function() {
            return Mobile.Sdk.core.execute("getUserLcid");
        },
        getWorkMode: function() {
            return Mobile.Sdk.core.execute("getWorkMode");
        },
		// RESCO
		getOrgUniqueName: function() {
			return Mobile.Sdk.core.execute("getOrgUniqueName");
		},
		getClientUrl: function() {
			return Mobile.Sdk.core.execute("getClientUrl");
		},
		prependOrgName: function(textToAdd) {
			return "/" + Mobile.Page.context.getOrgUniqueName() + textToAdd;
		},
		isOutlookClient: function() {
			return false;
		},
		isOutlookOnline: function() {
			return Mobile.Sdk.core.execute("isOutlookOnline");
		},
		isClientOnline: function() {
			return Mobile.Sdk.core.execute("isClientOnline");
		}
    };
}();

Mobile.namespace("Page.data");

Mobile.Page.data.logValidationMessage = function(methodName, argumentNames, reason) {
    var msg = "Mobile.Page.data: input validation error. Invalid arguments passed to method '{0}'. \n	Method: {0} \n	Arguments: {1} \n	Reason: {2}";
    Mobile.Sdk.core.logger.log(msg.format(methodName, argumentNames, reason));
};

Mobile.Page.data.saveHeader = function(options, callback) {
    var message, args;
    callback = typeof callback === "undefined" ? null : callback;
    if (callback !== null && Object.prototype.toString.call(callback) != "[object Function]") {
        message = "callback is not a Function.";
        Mobile.Page.data.logValidationMessage("saveHeader", callback, message);
        throw new Error(message);
    }
    if (typeof options === "undefined" || options === null) {
        message = "Missing mandatory options parameter.";
        Mobile.Page.data.logValidationMessage("saveHeader", options, message);
        if (callback) callback({
            error: message
        });
        return;
    }
    if (Object.prototype.toString.call(options) != "[object Object]") {
        message = "options is not a Object.";
        Mobile.Page.data.logValidationMessage("saveHeader", options, message);
        if (callback) callback({
            error: message
        });
        return;
    }
    if (typeof options.headerFields === "undefined" || options.headerFields === null) {
        message = "Missing mandatory options.headerFields parameter.";
        Mobile.Page.data.logValidationMessage("saveHeader", options.headerFields, message);
        if (callback) callback({
            error: message
        });
        return;
    }
    if (callback === null && typeof options.userState !== "undefined" && options.userState !== null) {
        Mobile.Page.data.logValidationMessage("saveHeader", options.userState, "You are passing a options.userState, but not a valid callback function. The passed options.userState will be ignored.");
        delete options.userState;
    }
    if (Object.prototype.toString.call(options.headerFields) != "[object Array]") {
        message = "options.headerFields is not an Array.";
        Mobile.Page.data.logValidationMessage("saveHeader", options.headerFields, message);
        if (callback) callback({
            error: message,
            userState: options.userState
        });
        return;
    }
    if (options.headerFields.length == 0) {
        message = "options.headerFields cannot be an empty Array.";
        Mobile.Page.data.logValidationMessage("saveHeader", options.headerFields, message);
        if (callback) callback({
            error: message,
            userState: options.userState
        });
        return;
    }
    var headerFields = options.headerFields;
    for (var i = 0; i < headerFields.length; i++) {
        if (typeof headerFields[i] === "undefined" || headerFields[i] === null) {
            Mobile.Page.data.logValidationMessage("saveHeader", options.headerFields, "The array headerFields must contain field names.");
            return;
        }
        if (Object.prototype.toString.call(headerFields[i]) != "[object String]") {
            Mobile.Page.data.logValidationMessage("saveHeader", options.headerFields, "The array headerFields must contain string field names.");
            return;
        }
        var att = Mobile.Page.getAttribute(headerFields[i]);
        if (att == null) {
            message = "The attribute " + headerFields[i] + " does not exist in the form.";
            Mobile.Page.data.logValidationMessage("saveHeader", options.headerFields, message);
            if (callback) callback({
                error: message,
                userState: options.userState
            });
            return;
        }
    }
    Mobile.Sdk.core.execute("saveHeader", options, callback);
};

Mobile.Page.data.entity = Mobile.Page.data.entity || function() {
    return {
        entityName: null,
        attributes: new Mobile.Page.collection(),
        getEntityName: function() {
            return this.entityName;
        },
        getId: function() {
			var id = Mobile.Sdk.core.execute("getEntityId");
			if( id )
				id = "{" + id.toUpperCase() + "}";
            return id;
        },
		// RESCO
		getIsDirty: function() {
            return Mobile.Sdk.core.execute("getEntityDirty");
        },
		save: function(saveType) {
            return Mobile.Sdk.core.execute("formEntitySave", saveType);
        }
    };
}();

Mobile.Page.data.entity.attribute = function() {
    function addNumberAttributeMethods(attributeInstance) {
        attributeInstance.getMax = function() {
            return Mobile.Sdk.core.execute("getMax", this.name);
        };
        attributeInstance.getMin = function() {
            return Mobile.Sdk.core.execute("getMin", this.name);
        };
        attributeInstance.getPrecision = function() {
            if (this.attributeType === "integer") {
                return 0;
            }
            return Mobile.Sdk.core.execute("getPrecision", this.name);
        };
    }
    function addOptionsetAttributeMethods(attributeInstance) {
        attributeInstance.getInitialValue = function() {
            return Mobile.Sdk.core.execute("getInitialValue", this.name);
        };
        attributeInstance.getOption = function(val) {
            if (isNaN(parseInt(val))) {
                Mobile.Page.logValidationMessage("getOption", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value cannot be parsed as a Number.");
                return null;
            } else {
                return Mobile.Sdk.core.execute("getOption", this.name, parseInt(val));
            }
        };
        attributeInstance.getOptions = function() {
            return Mobile.Sdk.core.execute("getOptions", this.name);
        };
        attributeInstance.getSelectedOption = function() {
            return Mobile.Sdk.core.execute("getSelectedOption", this.name);
        };
        attributeInstance.getText = function() {
            return Mobile.Sdk.core.execute("getText", this.name);
        };
    }
    function addStringAndMemoAttributeMethods(attributeInstance) {
        attributeInstance.getMaxLength = function() {
            return Mobile.Sdk.core.execute("getMaxLength", this.name);
        };
    }
    var attribute = function(name, attributetype) {
        this.name = name;
        this.attributeType = attributetype;
        if ([ "money", "decimal", "integer", "double" ].indexOf(this.attributeType) > -1) {
            addNumberAttributeMethods(this);
        }
        if (this.attributeType === "optionset") {
            addOptionsetAttributeMethods(this);
        }
        if ([ "string", "memo" ].indexOf(this.attributeType) > -1 && this.name !== "filename") {
            addStringAndMemoAttributeMethods(this);
        }
        this.onchange = function() {};
        this.fireOnChange = function() {
            if (this.onchange) {
                this.onchange();
            }
        };
        this.getAttributeType = function() {
            return this.attributeType;
        };
        this.getName = function() {
            return this.name;
        };
        this.getRequiredLevel = function() {
            return Mobile.Sdk.core.execute("getRequiredLevel", this.name);
        };
        this.getValue = function() {
            return Mobile.Sdk.core.execute("getValue", this.name);
        };
        if (this.name !== "filename") {
            this.setRequiredLevel = function(reqLevel) {
                var validValues = [ "none", "required", "recommended" ];
                if (validValues.indexOf(reqLevel) > -1) {
                    Mobile.Sdk.core.execute("setRequiredLevel", this.name, reqLevel);
                    return;
                }
                Mobile.Page.logValidationMessage("setRequiredLevel", this.name, this.attributeType, reqLevel, Mobile.Page.data.entity.getEntityName(), null, "RequiredLevel is not in valid values: none, required, recommended.");
            };
        }
        if (this.name !== "filename") {
            this.setValue = function(val) {
                var floatValue;
                if (typeof val === "undefined" || val === null) {
                    if (this.name === "statuscode") {
                        Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Field statuscode cannot be set to null.");
                        return;
                    }
                    Mobile.Sdk.core.execute("setValue", this.name, null);
                    return;
                }
                if (this.attributeType === "boolean") {
                    var bool = Boolean(val);
                    Mobile.Sdk.core.execute("setValue", this.name, bool);
                    return;
                }
                if (this.attributeType === "datetime") {
                    if (Object.prototype.toString.call(val) == "[object String]") {
                        if (isNaN(Date.parse(val))) {
                            Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value of type String cannot be parsed as a Date.");
                        } else {
                            Mobile.Sdk.core.execute("setValue", this.name, new Date(val));
                        }
                        return;
                    }
                    if (Object.prototype.toString.call(val) == "[object Date]") {
                        if (isNaN(val.getTime())) {
                            Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value of type Date is not a valid Date.");
                        } else {
                            Mobile.Sdk.core.execute("setValue", this.name, val);
                        }
                        return;
                    }
                    if (Object.prototype.toString.call(val) == "[object Number]") {
                        if (val > 864e13 || val < -864e13) {
                            Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value of type Number is outside of the valid ranges (between -8640000000000001 and 8640000000000001).");
                        } else {
                            Mobile.Sdk.core.execute("setValue", this.name, new Date(val));
                        }
                        return;
                    }
                    Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value is not of supported type Date, String or Number.");
                    return;
                }
                if (this.attributeType === "decimal" || this.attributeType === "double") {
                    floatValue = parseFloat(val);
                    if (Object.prototype.toString.call(val) == "[object String]") {
                        if (isNaN(floatValue)) {
                            Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value of type String cannot be parsed as a Float.");
                        } else {
                            if (!validateFloatDecimalRange(floatValue)) {
                                Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value of type Number is outside of the valid ranges (between -100000000000 and 100000000000).");
                                return;
                            }
                            Mobile.Sdk.core.execute("setValue", this.name, floatValue);
                        }
                        return;
                    }
                    if (Object.prototype.toString.call(val) == "[object Number]") {
                        if (!validateFloatDecimalRange(floatValue)) {
                            Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value of type Number is outside of the valid ranges (between -100000000000 and 100000000000).");
                            return;
                        }
                        Mobile.Sdk.core.execute("setValue", this.name, floatValue);
                        return;
                    }
                    Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value is not of supported type String or Number.");
                    return;
                }
                if (this.attributeType === "money") {
                    floatValue = parseFloat(val);
                    if (Object.prototype.toString.call(val) == "[object String]") {
                        if (isNaN(floatValue)) {
                            Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value of type String cannot be parsed as a Float.");
                        } else {
                            if (!validateMoneyRange(floatValue)) {
                                Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value of type Number is outside of the valid ranges (between -922337203685477 and 922337203685477).");
                                return;
                            }
                            Mobile.Sdk.core.execute("setValue", this.name, floatValue);
                        }
                        return;
                    }
                    if (Object.prototype.toString.call(val) == "[object Number]") {
                        if (!validateMoneyRange(floatValue)) {
                            Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value of type Number is outside of the valid ranges (between -922337203685477 and 922337203685477).");
                            return;
                        }
                        Mobile.Sdk.core.execute("setValue", this.name, floatValue);
                        return;
                    }
                    Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value is not of supported type String or Number.");
                    return;
                }
                if (this.attributeType === "integer") {
                    var intValue = parseInt(val);
                    if (Object.prototype.toString.call(val) == "[object String]") {
                        if (isNaN(intValue)) {
                            Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value of type String cannot be parsed as an Integer.");
                        } else {
                            if (!validateIntegerRange(intValue)) {
                                Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value of type Number is outside of the valid ranges (between -2147483648 and 2147483647).");
                                return;
                            }
                            Mobile.Sdk.core.execute("setValue", this.name, intValue);
                        }
                        return;
                    }
                    if (Object.prototype.toString.call(val) == "[object Number]") {
                        if (!validateIntegerRange(val)) {
                            Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value of type Number is outside of the valid ranges (between -2147483648 and 2147483647).");
                            return;
                        }
                        Mobile.Sdk.core.execute("setValue", this.name, intValue);
                        return;
                    }
                    Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value is not of supported type String or Number.");
                    return;
                }
                if (this.attributeType === "memo" || this.attributeType === "string") {
                    Mobile.Sdk.core.execute("setValue", this.name, val.toString());
                    return;
                }
                if (this.attributeType === "lookup") {
                    if (Object.prototype.toString.call(val) != "[object Array]") {
                        Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value is not an Array.");
                        return;
                    }
                    var multilookups = [ "to", "cc", "bcc", "requiredattendees", "optionalattendees", "resources", "customer", "customers", "partner", "partner" ];
                    if (multilookups.indexOf(this.name) == -1 && val.length > 1) {
                        Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Array should only contain 1 item.");
                        return;
                    }
                    var ids = [];
                    var currentId;
                    for (var i = 0; i < val.length; i++) {
                        if (typeof val[i].id === "undefined" || val[i].id === null) {
                            Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value[" + i + "].id is missing.");
                            return;
                        }
                        if (Object.prototype.toString.call(val[i].id) != "[object String]") {
                            Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value[" + i + "].id is not of type String.");
                            return;
                        }
                        if (/^(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}$/.test(val[i].id) === false) {
                            Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value[" + i + "].id doesn't seem to be a valid GUID.");
                            return;
                        }
                        currentId = val[i].id.toLowerCase();
                        currentId = currentId.replace("{", "").replace("}", "");
                        val[i].id = currentId;
                        if (ids.indexOf(currentId) > -1) {
                            Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value[" + i + "].id already exists.");
                            return;
                        } else {
                            ids.push(currentId);
                        }
                        if (typeof val[i].entityType === "undefined" || val[i].entityType === null) {
                            Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value[" + i + "].entityType is missing.");
                            return;
                        }
                        if (Object.prototype.toString.call(val[i].entityType) != "[object String]") {
                            Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value[" + i + "].entityType is not of type String.");
                            return;
                        }
                        if (typeof val[i].name === "undefined" || val[i].name === null) {
                            Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value[" + i + "].name is missing.");
                            return;
                        }
                        if (Object.prototype.toString.call(val[i].name) != "[object String]") {
                            Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value[" + i + "].name is not of type String.");
                            return;
                        }
                    }
                    Mobile.Sdk.core.execute("setValue", this.name, val);
                    return;
                }
                if (this.attributeType === "optionset") {
                    if (this.name === "statecode") {
                        Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "This method is not supported for field statecode.");
                        return;
                    }
                    if (Object.prototype.toString.call(val) == "[object String]") {
                        if (isNaN(parseInt(val))) {
                            Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value cannot be parsed as a Number.");
                        } else {
                            Mobile.Sdk.core.execute("setValue", this.name, parseInt(val));
                        }
                        return;
                    }
                    if (Object.prototype.toString.call(val) == "[object Number]") {
                        Mobile.Sdk.core.execute("setValue", this.name, parseInt(val));
                        return;
                    }
                    Mobile.Page.logValidationMessage("setValue", this.name, this.attributeType, val, Mobile.Page.data.entity.getEntityName(), null, "Value is not of supported type String or Number.");
                    return;
                }
                if (this.name !== "statecode") {
                    Mobile.Sdk.core.execute("setValue", this.name, val);
                    return;
                }
                function validateIntegerRange(val) {
                    return val >= -2147483648 && val <= 2147483647;
                }
                function validateMoneyRange(val) {
                    return val >= -922337203685477 && val <= 922337203685477;
                }
                function validateFloatDecimalRange(val) {
                    return val >= -1e11 && val <= 1e11;
                }
            };
        }
		// RESCO
		this.getIsDirty = function() {
            return Mobile.Sdk.core.execute("getFieldIsDirty", this.name);
        };
		// decide which one to use - this one - or cwrs?
		this.getAttributeType = function() {
            return Mobile.Sdk.core.execute("getAttributeType", this.name);
        };
		this.getFormat = function() {
            return Mobile.Sdk.core.execute("getFieldFormat", this.name);
        };
		this.getInitialValue = function() {
            return Mobile.Sdk.core.execute("getInitialValue", this.name);
		};
		this.getUserPrivilege = function () {
		    return Mobile.Sdk.core.execute("getUserPrivilege", this.name);
		};
    };
    return attribute;
}();

Mobile.namespace("Page.ui");

Mobile.Page.ui.controls = new Mobile.Page.collection();

Mobile.Page.ui.getFormType = function() {
    return Mobile.Sdk.core.execute("getFormType");
};

Mobile.Page.ui.getEditMode = function() {
    return Mobile.Sdk.core.execute("getEditMode");
};

// RESCO
Mobile.Page.ui.tabs = new Mobile.Page.collection();

Mobile.Page.ui.close = function () {
    return Mobile.Sdk.core.execute("formClose");
};

Mobile.Page.ui.control = function() {
    function addOptionsetControlMethods(controlinstance) {
        controlinstance.addOption = function(opt, index) {
            if (typeof index === "undefined") index = null;
            if (index !== null && isNaN(parseInt(index))) {
                Mobile.Page.logValidationMessage("addOption", this.name, this.controlType, index, Mobile.Page.data.entity.getEntityName(), null, "Index cannot be parsed as a Number.");
                return;
            }
            if (opt === null || typeof opt === "undefined") {
                Mobile.Page.logValidationMessage("addOption", this.name, this.controlType, opt, Mobile.Page.data.entity.getEntityName(), null, "Missing mandatory Option parameter.");
                return;
            }
            if (typeof opt.text === "undefined" || opt.text === null) {
                Mobile.Page.logValidationMessage("addOption", this.name, this.controlType, opt, Mobile.Page.data.entity.getEntityName(), null, "Option.text is missing.");
                return;
            } else {
                if (Object.prototype.toString.call(opt.text) != "[object String]") {
                    Mobile.Page.logValidationMessage("addOption", this.name, this.controlType, opt, Mobile.Page.data.entity.getEntityName(), null, "Option.text is not of type String.");
                    return;
                }
            }
            if (typeof opt.value === "undefined" || opt.value === null) {
                Mobile.Page.logValidationMessage("addOption", this.name, this.controlType, opt, Mobile.Page.data.entity.getEntityName(), null, "Option.value is missing.");
                return;
            } else {
                if (isNaN(parseInt(opt.value))) {
                    Mobile.Page.logValidationMessage("addOption", this.name, this.controlType, opt, Mobile.Page.data.entity.getEntityName(), null, "Option.value cannot be parsed as a Number.");
                    return;
                }
            }
            Mobile.Sdk.core.execute("addOption", this.name, opt, index);
        };
        controlinstance.clearOptions = function() {
            Mobile.Sdk.core.execute("clearOptions", this.name);
        };
        controlinstance.removeOption = function(val) {
            if (isNaN(parseInt(val))) {
                Mobile.Page.logValidationMessage("removeOption", this.name, this.controlType, val, Mobile.Page.data.entity.getEntityName(), null, "Value cannot be parsed as a Number.");
                return;
            }
            return Mobile.Sdk.core.execute("removeOption", this.name, parseInt(val));
        };
    }
    function addIFrameControlMethods(controlinstance) {
        controlinstance.getSrc = function() {
            return Mobile.Sdk.core.execute("getSrc", this.name);
        };
        controlinstance.setSrc = function(src) {
            if (typeof src === "undefined" || src === null) {
                Mobile.Sdk.core.execute("setSrc", this.name, null);
                return;
            }
            var urlPattern = new RegExp("^(https?://)?(([0-9]{1,3}.){3}[0-9]{1,3}|[0-9a-z_!~*'()-.])+(:[0-9]{1,4})?((/?)|(/[0-9a-z_!~*'().;?:@&=+$,%#-]+)+/?)$", "i");
            var queryPattern = new RegExp("([^?=&]+)(=([^&]*))?", "i");
            var queryIndex = src.indexOf("?");
            var hashIndex = src.indexOf("#");
            var url, query;
            if (queryIndex > -1) {
                url = src.substring(0, queryIndex);
                query = src.substring(queryIndex);
            } else if (hashIndex > -1) {
                url = src.substring(0, hashIndex);
                query = src.substring(hashIndex);
            } else {
                url = src;
            }
            if (!urlPattern.test(url)) {
                Mobile.Page.logValidationMessage("setSrc", this.name, this.controlType, src, Mobile.Page.data.entity.getEntityName(), null, "Source is not a valid URL.");
            } else if (queryIndex > -1 && !queryPattern.test(query)) {
                Mobile.Page.logValidationMessage("setSrc", this.name, this.controlType, src, Mobile.Page.data.entity.getEntityName(), null, "Source is not a valid URL. Querystring is invalid.");
            } else {
                Mobile.Sdk.core.execute("setSrc", this.name, src);
            }
        };
        controlinstance.getInitialUrl = function() {
            return Mobile.Sdk.core.execute("getInitialUrl", this.name);
        };
    }
    function addLookupControlMethods(controlinstance) {
        controlinstance.onPreSearch = function(initialLookupEntities) {
            if (initialLookupEntities === null || initialLookupEntities.length === 0) {
                Mobile.Sdk.core.logger.log("A PreSearch event cannot be executed on a lookup control with no lookup entities.");
                Mobile.Sdk.core.execute("onPreSearchDone", this.name, null, null, null);
                return;
            }
            this.initialLookupEntities = initialLookupEntities;
            this.defaultViews = [];
            this.xmlFilters = [];
            this.lookupEntities = initialLookupEntities;
            this.unspecificViewId = null;
            try {
                var size = this.preSearchHandlers.length;
                for (var i = 0; i < size; i++) {
                    var handler = this.preSearchHandlers[i];
                    handler();
                }
            } catch (err) {
                Mobile.Sdk.core.logger.log("There was an error with this field's customized event (Field: " + this.name + " - Event:  PreSearch).\nError: " + err.message);
                Mobile.Sdk.core.execute("onPreSearchDone", this.name, this.initialLookupEntities, null, null);
                return;
            }
            this.onPreSearchDone();
        };
        controlinstance.onPreSearchDone = function() {
            this.callNative = false;
            var validLookupEntities;
            var validDefaultViews;
            var validXmlFilters;
            if (this.lookupEntities.length === 0) {
                Mobile.Sdk.core.logger.log("Lookup entities on control " + this.name + " cannot be empty.");
                validLookupEntities = this.initialLookupEntities;
            } else {
                validLookupEntities = this.lookupEntities;
            }
            if (this.defaultViews.length === 0) {
                validDefaultViews = null;
                if (this.unspecificViewId) {
                    validDefaultViews = [];
                    validDefaultViews.push({
                        entity: validLookupEntities[0],
                        id: this.unspecificViewId
                    });
                }
            } else {
                var viewSize = this.defaultViews.length;
                validDefaultViews = [];
                var firstEntityForDefaultView = null;
                var addGeneralViewId = true;
                if (this.unspecificViewId) {
                    firstEntityForDefaultView = validLookupEntities[0];
                }
                for (var k = 0; k < viewSize; k++) {
                    var viewObject = this.defaultViews[k];
                    if (validLookupEntities.indexOf(viewObject.entity) != -1) {
                        validDefaultViews.push(viewObject);
                        if (viewObject.entity === firstEntityForDefaultView) {
                            addGeneralViewId = false;
                        }
                    } else {
                        Mobile.Sdk.core.logger.log("Cannot add a default view id to an entity that is not in the lookup entity list.");
                    }
                }
                if (addGeneralViewId && firstEntityForDefaultView) {
                    validDefaultViews.push({
                        entity: firstEntityForDefaultView,
                        id: this.unspecificViewId
                    });
                }
            }
            if (this.xmlFilters.length === 0) {
                validXmlFilters = null;
            } else {
                var filterSize = this.xmlFilters.length;
                validXmlFilters = [];
                for (var j = 0; j < filterSize; j++) {
                    var filterObject = this.xmlFilters[j];
                    if (validLookupEntities.indexOf(filterObject.entity) != -1) {
                        filterObject.filter = "<filter type='and'>" + filterObject.filter + "</filter>";
                        validXmlFilters.push(filterObject);
                    } else {
                        Mobile.Sdk.core.logger.log("Cannot apply filter to an entity that is not in the lookup entity list.");
                    }
                }
            }
            Mobile.Sdk.core.execute("onPreSearchDone", this.name, validLookupEntities, validDefaultViews, validXmlFilters);
        };
        controlinstance.addPreSearch = function(handler) {
            if (typeof handler === "undefined" || handler === null) {
                var message = "Missing mandatory handler parameter.";
                Mobile.Page.logValidationMessage("addPreSearch", this.name, this.controlType, handler, Mobile.Page.data.entity.getEntityName(), null, "Missing mandatory handler parameter.");
                return;
            }
            if (Object.prototype.toString.call(handler) != "[object Function]") {
                Mobile.Page.logValidationMessage("addPreSearch", this.name, this.controlType, handler, Mobile.Page.data.entity.getEntityName(), null, "Handler is not a Function.");
                return;
            }
            this.preSearchHandlers.push(handler);
        };
        controlinstance.removePreSearch = function(handler) {
            if (typeof handler === "undefined" || handler === null) {
                var message = "Missing mandatory handler parameter.";
                Mobile.Page.logValidationMessage("removePreSearch", this.name, this.controlType, handler, Mobile.Page.data.entity.getEntityName(), null, "Missing mandatory handler parameter.");
                return;
            }
            if (Object.prototype.toString.call(handler) != "[object Function]") {
                Mobile.Page.logValidationMessage("removePreSearch", this.name, this.controlType, handler, Mobile.Page.data.entity.getEntityName(), null, "Handler is not a Function.");
                return;
            }
            var index = -1;
            var size = this.preSearchHandlers.length;
            for (var i = 0; i < size; i++) {
                var addedHandler = this.preSearchHandlers[i];
                if (JSON.stringify(addedHandler) === JSON.stringify(handler)) {
                    index = i;
                    break;
                }
            }
            if (index > -1) {
                this.preSearchHandlers.splice(index, 1);
            } else {
                Mobile.Page.logValidationMessage("removePreSearch", this.name, this.controlType, handler, Mobile.Page.data.entity.getEntityName(), null, "The handler you are trying to remove does not exist.");
            }
        };
        controlinstance.addCustomFilter = function(filterXML, entityLogicalName) {
            if (typeof this.initialLookupEntities === "undefined") {
                Mobile.Sdk.core.logger.log("Cannot add filters on a lookup control outside the PreSearch event.");
                return;
            }
            var allEntities = false;
            if (typeof entityLogicalName === "undefined" || entityLogicalName === null) {
                if (this.initialLookupEntities.length === 1) {
                    entityLogicalName = this.initialLookupEntities[0];
                } else {
                    allEntities = true;
                }
            } else if (Object.prototype.toString.call(entityLogicalName) != "[object String]" || this.initialLookupEntities.indexOf(entityLogicalName) < 0) {
                Mobile.Page.logValidationMessage("addCustomFilter", this.name, this.controlType, entityLogicalName, Mobile.Page.data.entity.getEntityName(), null, "Parameter entityLogicalName must be a string and must exist in the initial lookup entities array.");
                throw new Error();
            }
            if (typeof filterXML === "undefined" || filterXML === null) {
                Mobile.Page.logValidationMessage("addCustomFilter", this.name, this.controlType, entityLogicalName, Mobile.Page.data.entity.getEntityName(), null, "Missing mandatory filterXML parameter.");
                throw new Error();
            }
            if (Object.prototype.toString.call(filterXML) != "[object String]") {
                Mobile.Page.logValidationMessage("addCustomFilter", this.name, this.controlType, entityLogicalName, Mobile.Page.data.entity.getEntityName(), null, "Parameter filterXML is not a string.");
                throw new Error();
            }
            if (filterXML.trim() === "") {
                Mobile.Page.logValidationMessage("addCustomFilter", this.name, this.controlType, entityLogicalName, Mobile.Page.data.entity.getEntityName(), null, "Missing mandatory filterXML parameter.");
                throw new Error();
            }
            if (window.DOMParser) {
                var fetchDoc;
                var parser = new DOMParser();
                try {
                    fetchDoc = parser.parseFromString(filterXML, "text/xml");
                    var message = "FilterXML is not a valid XML document.";
                    if (fetchDoc.getElementsByTagName("parsererror").length > 0) {
                        throw new Error(message);
                    }
                } catch (err) {
                    Mobile.Page.logValidationMessage("addCustomFilter", this.name, this.controlType, filterXML, Mobile.Page.data.entity.getEntityName(), null, "FilterXML is not a valid XML document.");
                    throw new Error();
                }
                var rootName = fetchDoc.documentElement.nodeName;
                if (rootName !== "filter") {
                    Mobile.Page.logValidationMessage("addCustomFilter", this.name, this.controlType, filterXML, Mobile.Page.data.entity.getEntityName(), null, "FilterXML is not a valid XML document: It must start with a 'filter' tag.");
                    throw new Error();
                }
                var linkEntities = fetchDoc.getElementsByTagName("link-entity");
                if (linkEntities.length > 0) {
                    Mobile.Page.logValidationMessage("addCustomFilter", this.name, this.controlType, filterXML, Mobile.Page.data.entity.getEntityName(), null, "FilterXML cannot contain link-entity elements.");
                    throw new Error();
                }
                if (fetchDoc.documentElement.getAttribute("aggregate")) {
                    Mobile.Page.logValidationMessage("addCustomFilter", this.name, this.controlType, filterXML, Mobile.Page.data.entity.getEntityName(), null, "FilterXML is not valid: Aggregates are not supported.");
                    throw new Error();
                }
                var filterTag = fetchDoc.getElementsByTagName("filter")[0];
                if (filterTag.getElementsByTagName("condition").length === 0) {
                    Mobile.Page.logValidationMessage("addCustomFilter", this.name, this.controlType, filterXML, Mobile.Page.data.entity.getEntityName(), null, "FilterXML is not valid: Missing condition.");
                    throw new Error();
                }
                filterXML = fetchDoc.xml ? fetchDoc.xml : new XMLSerializer().serializeToString(fetchDoc);
            }
            var concatFiltersFunction = function(xmlFilters, currentEntity, filterToAdd) {
                var size = xmlFilters.length;
                if (size === 0) {
                    xmlFilters.push({
                        entity: currentEntity,
                        filter: filterToAdd
                    });
                } else {
                    var found = false;
                    for (var i = 0; i < size; i++) {
                        var currentFilter = xmlFilters[i];
                        if (currentFilter.entity === currentEntity) {
                            currentFilter.filter += filterToAdd;
                            found = true;
                        }
                    }
                    if (!found) {
                        xmlFilters.push({
                            entity: currentEntity,
                            filter: filterToAdd
                        });
                    }
                }
            };
            if (allEntities) {
                var entitiesSize = this.initialLookupEntities.length;
                for (var i = 0; i < entitiesSize; i++) {
                    concatFiltersFunction(this.xmlFilters, this.initialLookupEntities[i], filterXML);
                }
            } else {
                concatFiltersFunction(this.xmlFilters, entityLogicalName, filterXML);
            }
        };
        controlinstance.addLookupEntity = function(entityLogicalName, index) {
            if (typeof this.initialLookupEntities === "undefined" || this.initialLookupEntities.length === 0) {
                Mobile.Sdk.core.logger.log("Cannot add lookup entities on a lookup control outside the PreSearch event.");
                return;
            }
            if (typeof entityLogicalName === "undefined" || entityLogicalName === null) {
                Mobile.Page.logValidationMessage("addLookupEntity", this.name, this.controlType, entityLogicalName, Mobile.Page.data.entity.getEntityName(), null, "Missing mandatory parameter entityLogicalName.");
                throw new Error();
            }
            if (Object.prototype.toString.call(entityLogicalName) != "[object String]" || this.initialLookupEntities.indexOf(entityLogicalName) < 0) {
                Mobile.Page.logValidationMessage("addLookupEntity", this.name, this.controlType, entityLogicalName, Mobile.Page.data.entity.getEntityName(), null, "Parameter entityLogicalName must be a string and must exist in the initial lookup entities array.");
                throw new Error();
            }
            if (this.lookupEntities.indexOf(entityLogicalName) != -1) {
                Mobile.Page.logValidationMessage("addLookupEntity", this.name, this.controlType, entityLogicalName, Mobile.Page.data.entity.getEntityName(), null, "Entity is already added.");
                throw new Error();
            }
            if (typeof index === "undefined" || index === null) {
                this.lookupEntities.push(entityLogicalName);
            } else if (isNaN(parseInt(index))) {
                Mobile.Page.logValidationMessage("addLookupEntity", this.name, this.controlType, index, Mobile.Page.data.entity.getEntityName(), null, "Value cannot be parsed as a Number.");
                throw new Error();
            } else {
                var location = parseInt(index);
                if (location < 0 || location > this.lookupEntities.length) {
                    Mobile.Page.logValidationMessage("addLookupEntity", this.name, this.controlType, index, Mobile.Page.data.entity.getEntityName(), null, "Value of the passed index is not valid.");
                    throw new Error();
                } else {
                    this.lookupEntities.splice(location, 0, entityLogicalName);
                }
            }
        };
        controlinstance.removeLookupEntity = function(entityLogicalName) {
            if (typeof this.initialLookupEntities === "undefined" || this.initialLookupEntities.length === 0) {
                Mobile.Sdk.core.logger.log("Cannot remove lookup entities from a lookup control outside the PreSearch event.");
                return;
            }
            if (typeof entityLogicalName === "undefined" || entityLogicalName === null) {
                Mobile.Page.logValidationMessage("removeLookupEntity", this.name, this.controlType, entityLogicalName, Mobile.Page.data.entity.getEntityName(), null, "Missing mandatory entityLogicalName parameter.");
                throw new Error();
            }
            if (Object.prototype.toString.call(entityLogicalName) != "[object String]") {
                Mobile.Page.logValidationMessage("removeLookupEntity", this.name, this.controlType, entityLogicalName, Mobile.Page.data.entity.getEntityName(), null, "Parameter entityLogicalName must be a string.");
                throw new Error();
            }
            var index = this.lookupEntities.indexOf(entityLogicalName);
            if (index > -1) {
                this.lookupEntities.splice(index, 1);
            } else {
                Mobile.Page.logValidationMessage("removeLookupEntity", this.name, this.controlType, entityLogicalName, Mobile.Page.data.entity.getEntityName(), null, "Entity to remove was not found.");
            }
        };
        controlinstance.clearLookupEntities = function() {
            if (typeof this.initialLookupEntities === "undefined") {
                Mobile.Sdk.core.logger.log("Cannot clear lookup entities on a lookup control outside the PreSearch event.");
                return;
            }
            this.lookupEntities = [];
        };
        controlinstance.setDefaultView = function(viewId, entityLogicalName) {
            if (typeof this.initialLookupEntities === "undefined" || this.initialLookupEntities.length === 0) {
                Mobile.Sdk.core.logger.log("Cannot setDefaultView on a lookup control outside the PreSearch event.");
                return;
            }
            if (typeof viewId === "undefined" || viewId === null) {
                Mobile.Page.logValidationMessage("setDefaultView", this.name, this.controlType, viewId, Mobile.Page.data.entity.getEntityName(), null, "Missing mandatory parameter viewId.");
                throw new Error();
            }
            var unspecifiedEntity = false;
            if (typeof entityLogicalName === "undefined" || entityLogicalName === null) {
                unspecifiedEntity = true;
            } else if (Object.prototype.toString.call(entityLogicalName) != "[object String]" || this.initialLookupEntities.indexOf(entityLogicalName) < 0) {
                Mobile.Page.logValidationMessage("setDefaultView", this.name, this.controlType, entityLogicalName, Mobile.Page.data.entity.getEntityName(), null, "Entity " + entityLogicalName + " is not a valid Lookup Entity.");
                throw new Error();
            }
            if (/^(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}$/.test(viewId) === false) {
                Mobile.Page.logValidationMessage("setDefaultView", this.name, this.controlType, viewId, Mobile.Page.data.entity.getEntityName(), null, "ViewId doesn't seem to be a valid GUID.");
                throw new Error();
            }
            var putViewIds = function(defaultViewList, currentEntity, viewIdToAdd) {
                var size = defaultViewList.length;
                if (size === 0) {
                    defaultViewList.push({
                        entity: currentEntity,
                        id: viewIdToAdd
                    });
                } else {
                    var found = false;
                    for (var i = 0; i < size; i++) {
                        var currentView = defaultViewList[i];
                        if (currentView.entity === currentEntity) {
                            currentView.id = viewIdToAdd;
                            found = true;
                        }
                    }
                    if (!found) {
                        defaultViewList.push({
                            entity: currentEntity,
                            id: viewIdToAdd
                        });
                    }
                }
            };
            if (unspecifiedEntity) {
                this.unspecificViewId = viewId;
            } else {
                putViewIds(this.defaultViews, entityLogicalName, viewId);
            }
        };
    }
    var control = function(name, controltype) {
        this.name = name;
        this.controlType = controltype;
        if (this.controlType === "optionset" && this.name !== "statecode" && this.name !== "statuscode") {
            addOptionsetControlMethods(this);
        }
        if (this.controlType === "iframe") {
            addIFrameControlMethods(this);
        }
        if (this.controlType === "lookup") {
            this.preSearchHandlers = [];
            addLookupControlMethods(this);
        }
        this.getControlType = function() {
            return this.controlType;
        };
        this.getDisabled = function() {
            return Mobile.Sdk.core.execute("getDisabled", this.name);
        };
        this.getName = function() {
            return this.name;
        };
        this.getVisible = function() {
            return Mobile.Sdk.core.execute("getVisible", this.name);
        };
        if (this.name !== "filename") {
            this.setDisabled = function(disable) {
                var bool = Boolean(disable);
                Mobile.Sdk.core.execute("setDisabled", this.name, bool);
            };
        }
        this.setVisible = function(visible) {
            var bool = Boolean(visible);
            Mobile.Sdk.core.execute("setVisible", this.name, bool);
        };
        this.getAttribute = function() {
            if (this.controlType !== "iframe") {
                return Mobile.Page.getAttribute(this.name);
            }
        };

		// RESCO
		this.getLabel = function() {
            return Mobile.Sdk.core.execute("getItemsLabel", this.name);
		};
		this.setLabel = function (label) {
		    return Mobile.Sdk.core.execute("setItemsLabel", this.name, label);
		};
    };
    return control;
}();

// RESCO
Mobile.Page.ui.tab = function() {

	var tab = function(name) {
        this.name = name;
        this.getName = function() {
            return this.name;
        };
        this.getVisible = function() {
            return Mobile.Sdk.core.execute("getTabVisible", this.name);
        };
        this.setVisible = function(visible) {
            var bool = Boolean(visible);
            Mobile.Sdk.core.execute("setTabVisible", this.name, bool);
        };
		this.getLabel = function() {
            return Mobile.Sdk.core.execute("getTabsLabel", this.name);
		};
		this.setLabel = function (label) {
		    return Mobile.Sdk.core.execute("setTabsLabel", this.name, label);
		};
    };

	return tab;
}();

if (window.addEventListener) {
    window.addEventListener("load", function() {
        Mobile.Sdk.core.execute("onHtmlPageLoaded");
    }, false);
} else if (window.attachEvent) {
    window.attachEvent("onload", function() {
        Mobile.Sdk.core.execute("onHtmlPageLoaded");
    });
}

Mobile.namespace("Page");

Mobile.Page.validationMessage = "Mobile.Page: input validation error. Invalid arguments passed to method '{0}'. \n	Field: {1} \n	FieldType: {2} \n	Method: {0} \n	Arguments: {3} \n	Entity: {4} \n	EntityId: {5} \n	Reason: {6}";

Mobile.Page.onformload = function() {};

Mobile.Page.onformsave = function() {
    return true;
};

Mobile.namespace("Page.utils");

Mobile.Page.utils.toMobileFormControls = function(controls) {
    for (i = 0; i < controls.length; i++) {
        var currentFormControlDefinition = controls[i];
        if (currentFormControlDefinition.at) {
            var attribute = new Mobile.Page.data.entity.attribute(currentFormControlDefinition.n, currentFormControlDefinition.at);
            Mobile.Page.data.entity.attributes.push(attribute);
        }
        var control = new Mobile.Page.ui.control(currentFormControlDefinition.n, currentFormControlDefinition.ct);
        Mobile.Page.ui.controls.push(control);
    }
};

Mobile.Page.utils.toMobileTabs = function(tabs) {
    for (i = 0; i < tabs.length; i++) {
        var tab = new Mobile.Page.ui.tab(tabs[i]);
        Mobile.Page.ui.tabs.push(tab);
    }
};

Mobile.namespace("Sdk.core.logger");

Mobile.Sdk.core.logger.log = function(message) {
    if (typeof message === "undefined" || message === null) {
        return;
    }
    Mobile.Sdk.core.execute("log", "JS: " + message.toString());
};

Mobile.namespace("Sdk.core.resources");

Mobile.Sdk.core.resources.getResource = function(resourceName) {
    return Mobile.Sdk.core.execute("getResource", resourceName);
};

Mobile.Sdk.device.validationMessage = "Mobile.Sdk.device: input validation error. Invalid arguments passed to method '{0}'. \n	Method: {0} \n	Arguments: {1} \n	Reason: {2}";

Mobile.Sdk.device.logValidationMessage = function(methodName, argumentNames, reason) {
    Mobile.Sdk.core.logger.log(Mobile.Sdk.device.validationMessage.format(methodName, argumentNames, reason));
};

function getValue(value, defaultValue) {
    return value === undefined || value === null ? defaultValue : value;
}

Mobile.Sdk.device.camera = Mobile.Sdk.device.camera || function() {
    return {
        getPicture: function(options, callback) {
            var message;
            if (typeof options === "undefined" || options === null) {
                message = "Missing mandatory Options parameter.";
                Mobile.Sdk.device.logValidationMessage("camera.getPicture", options, message);
                if (callback) callback({
                    error: message
                });
                return;
            }
            if (Object.prototype.toString.call(options) != "[object Object]") {
                message = "Options is not an Object.";
                Mobile.Sdk.device.logValidationMessage("camera.getPicture", options, message);
                if (callback) callback({
                    error: message
                });
                return;
            }
            if (typeof callback === "undefined" || callback === null) {
                message = "Missing mandatory Callback parameter.";
                Mobile.Sdk.device.logValidationMessage("camera.getPicture", callback, message);
                throw new Error(message);
            }
            if (Object.prototype.toString.call(callback) != "[object Function]") {
                message = "Callback is not a Function.";
                Mobile.Sdk.device.logValidationMessage("camera.getPicture", callback, message);
                throw new Error(message);
            }
            options.quality = getValue(options.quality, 50);
            options.destinationType = getValue(options.destinationType, Mobile.Sdk.device.camera.DestinationType.FILE_URI);
            options.sourceType = getValue(options.sourceType, Mobile.Sdk.device.camera.PictureSourceType.CAMERA);
            options.encodingType = getValue(options.encodingType, Mobile.Sdk.device.camera.EncodingType.JPEG);
            options.popoverOptions = getValue(options.popoverOptions, new Mobile.Sdk.device.camera.CameraPopoverOptions());
            if (Object.prototype.toString.call(options.quality) != "[object Number]" || isNaN(options.quality)) {
                message = "Options.quality is not a Number.";
                Mobile.Sdk.device.logValidationMessage("camera.getPicture", options, message);
                if (callback) callback({
                    error: message
                });
                return;
            }
            if (options.quality < 0 || options.quality > 100) {
                message = "Options.quality should be between 0 and 100.";
                Mobile.Sdk.device.logValidationMessage("camera.getPicture", options, message);
                if (callback) callback({
                    error: message
                });
                return;
            }
            if (Object.prototype.toString.call(options.destinationType) != "[object Number]" || isNaN(options.destinationType)) {
                message = "Options.destinationType is not a Number.";
                Mobile.Sdk.device.logValidationMessage("camera.getPicture", options, message);
                if (callback) callback({
                    error: message
                });
                return;
            }
            if (options.destinationType < 0 || options.destinationType > 1) {
                message = "Options.destinationType should be 0 or 1.";
                Mobile.Sdk.device.logValidationMessage("camera.getPicture", options, message);
                if (callback) callback({
                    error: message
                });
                return;
            }
            if (Object.prototype.toString.call(options.sourceType) != "[object Number]" || isNaN(options.sourceType)) {
                message = "Options.sourceType is not a Number.";
                Mobile.Sdk.device.logValidationMessage("camera.getPicture", options, message);
                if (callback) callback({
                    error: message
                });
                return;
            }
            if (options.sourceType < 0 || options.sourceType > 1) {
                message = "Options.sourceType should be 0 or 1.";
                Mobile.Sdk.device.logValidationMessage("camera.getPicture", options, message);
                if (callback) callback({
                    error: message
                });
                return;
            }
            if (Object.prototype.toString.call(options.encodingType) != "[object Number]" || isNaN(options.encodingType)) {
                message = "Options.encodingType is not a Number.";
                Mobile.Sdk.device.logValidationMessage("camera.getPicture", options, message);
                if (callback) callback({
                    error: message
                });
                return;
            }
            if (options.encodingType !== 0) {
                message = "Options.encodingType should be 0 (JPEG).";
                Mobile.Sdk.device.logValidationMessage("camera.getPicture", options, message);
                if (callback) callback({
                    error: message
                });
                return;
            }
            Mobile.Sdk.core.execute("getPicture", options, callback);
        }
    };
}();

Mobile.Sdk.device.camera.PictureSourceType = {
    PHOTOLIBRARY: 0,
    CAMERA: 1
};

Mobile.Sdk.device.camera.DestinationType = {
    DATA_URL: 0,
    FILE_URI: 1
};

Mobile.Sdk.device.camera.EncodingType = {
    JPEG: 0
};

Mobile.Sdk.device.camera.PopoverArrowDirection = {
    ARROW_UP: 1,
    ARROW_DOWN: 2,
    ARROW_LEFT: 4,
    ARROW_RIGHT: 8,
    ARROW_ANY: 15
};

Mobile.Sdk.device.camera.CameraPopoverOptions = function(x, y, width, height, arrowDir) {
    this.x = x || 0;
    this.y = y || 32;
    this.width = width || 320;
    this.height = height || 480;
    this.arrowDir = arrowDir || Mobile.Sdk.device.camera.PopoverArrowDirection.ARROW_ANY;
};

Mobile.Sdk.device.geolocation = Mobile.Sdk.device.geolocation || function() {
    return {
        getCurrentPosition: function(options, callback) {
            if (typeof options === "undefined" || options === null) {
                var message = "Missing mandatory Options parameter.";
                Mobile.Sdk.device.logValidationMessage("geolocation.getCurrentPosition", options, message);
                if (callback) callback({
                    error: message
                });
                return;
            }
            if (Object.prototype.toString.call(options) != "[object Object]") {
                var message = "Options is not an Object.";
                Mobile.Sdk.device.logValidationMessage("geolocation.getCurrentPosition", options, message);
                if (callback) callback({
                    error: message
                });
                return;
            }
            if (typeof callback === "undefined" || callback === null) {
                var message = "Missing mandatory Callback parameter.";
                Mobile.Sdk.device.logValidationMessage("geolocation.getCurrentPosition", callback, message);
                throw new Error(message);
            }
            if (Object.prototype.toString.call(callback) != "[object Function]") {
                var message = "Callback is not a Function.";
                Mobile.Sdk.device.logValidationMessage("geolocation.getCurrentPosition", callback, message);
                throw new Error(message);
            }
            var maxAge = getValue(parseInt(options.maximumAge), 0);
            var timeout = getValue(parseInt(options.timeout), 0);
            if (Object.prototype.toString.call(options.maximumAge) == "[object String]" && isNaN(maxAge)) {
                var message = "Options.maximumAge is a value of type String and cannot be parsed as an Integer.";
                Mobile.Sdk.device.logValidationMessage("geolocation.getCurrentPosition", options, message);
                if (callback) callback({
                    error: message
                });
                return;
            }
            if (options.maximumAge < 0) {
                var message = "Options.maximumAge cannot be a negative number.";
                Mobile.Sdk.device.logValidationMessage("geolocation.getCurrentPosition", options, message);
                if (callback) callback({
                    error: message
                });
                return;
            }
            if (Object.prototype.toString.call(options.timeout) == "[object String]" && isNaN(timeout)) {
                var message = "Options.timeout is a value of type String and cannot be parsed as an Integer.";
                Mobile.Sdk.device.logValidationMessage("geolocation.getCurrentPosition", options, message);
                if (callback) callback({
                    error: message
                });
                return;
            }
            if (options.timeout < 0) {
                var message = "Options.timeout cannot be a negative number.";
                Mobile.Sdk.device.logValidationMessage("geolocation.getCurrentPosition", options, message);
                if (callback) callback({
                    error: message
                });
                return;
            }
            options.maximumAge = maxAge;
            options.timeout = timeout;
            options.enableHighAccuracy = getValue(options.enableHighAccuracy, true);
            var bool = Boolean(options.enableHighAccuracy);
            options.enableHighAccuracy = bool;
            Mobile.Sdk.core.execute("getCurrentPosition", options, callback);
        }
    };
}();

Mobile.Sdk.core.entitymanager = function(entitytypename) {
    if (!(this instanceof Mobile.Sdk.core.entitymanager)) {
        return new Mobile.Sdk.core.entitymanager(entitytypename);
    } else {
        if (typeof entitytypename === "undefined" || entitytypename === null) {
            Mobile.Sdk.core.logValidationMessage("entitymanager", entitytypename, "Missing mandatory EntityTypeName parameter.");
            return;
        }
        if (Object.prototype.toString.call(entitytypename) != "[object String]") {
            Mobile.Sdk.core.logValidationMessage("entitymanager", entitytypename, "EntityTypeName is not a String.");
            return;
        }
        if (entitytypename.trim() === "") {
            Mobile.Sdk.core.logValidationMessage("entitymanager", entitytypename, "Missing mandatory EntityTypeName parameter.");
            return;
        }
        this.objecttypename = entitytypename.toLowerCase();
        this.create = function(entity, callback, executionOptions, userState) {
            var message;
            if (typeof userState === "undefined") userState = null;
            executionOptions = executionOptions || new Mobile.Sdk.core.entitymanager.ExecutionOptions();
            if (arguments.length === 3) {
                if (!executionOptions.hasOwnProperty("executionLocation")) {
                    userState = executionOptions;
                    executionOptions = new Mobile.Sdk.core.entitymanager.ExecutionOptions();
                }
            } else if (arguments.length === 4) {
                if (!executionOptions.hasOwnProperty("executionLocation")) {
                    message = "ExecutionOptions is not a valid Mobile.Sdk.core.entitymanager.ExecutionOptions object.";
                    Mobile.Sdk.core.logValidationMessage("entitymanager.create", entity, message);
                    if (callback) callback({
                        error: message,
                        userState: userState
                    });
                    return;
                }
            }
            if (executionOptions.executionLocation < 1 || executionOptions.executionLocation > 4) {
                message = "ExecutionOptions.ExecutionLocation should be value between 1 and 4.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.create", entity, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (typeof entity === "undefined" || entity === null) {
                message = "Missing mandatory Entity parameter.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.create", entity, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (Object.prototype.toString.call(entity) != "[object Object]") {
                message = "Entity is not an Object.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.create", entity, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (typeof callback === "undefined" || callback === null) {
                message = "Missing mandatory Callback parameter.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.create", callback, message);
                throw new Error(message);
            }
            if (Object.prototype.toString.call(callback) != "[object Function]") {
                message = "Callback is not a Function.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.create", callback, message);
                throw new Error(message);
            }
            if (typeof entity.statecode !== "undefined") {
                message = "Entity should not contain field 'statecode'.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.create", entity, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            var requiredEntities = [ "appointment", "contract", "contractdetail", "contracttemplate", "customeraddress", "customerrelationship", "equipment", "incident", "kbarticle", "kbarticlecomment", "opportunity", "quote", "salesliteratureitem", "salesorder", "service", "serviceappointment", "site", "territory" ];
            var requiredAttributes = [ [ "scheduledstart", "scheduledend" ], [ "contracttemplateid", "customerid", "billingcustomerid", "activeon", "expireson", "billingstarton", "billingendon" ], [ "contractid", "activeon", "expireson", "price" ], [ "abbreviation", "name" ], [ "parentid" ], [ "customerid", "partnerid" ], [ "name", "businessunitid", "timezonecode" ], [ "customerid" ], [ "kbarticletemplateid", "subjectid" ], [ "kbarticleid" ], [ "customerid" ], [ "customerid" ], [ "salesliteratureid" ], [ "customerid" ], [ "name", "granularity", "resourcespecid", "initialstatuscode", "duration" ], [ "scheduledstart", "scheduledend" ], [ "name", "timezonecode" ], [ "name" ] ];
            var entityIndex = requiredEntities.indexOf(this.objecttypename);
            if (entityIndex > -1) {
                var attributes = requiredAttributes[entityIndex];
                for (i = 0; i < attributes.length; i++) {
                    if (typeof entity[attributes[i]] === "undefined" || entity[attributes[i]] === null) {
                        message = "Missing required attribute '" + attributes[i] + "'.";
                        Mobile.Sdk.core.logValidationMessage("entitymanager.create", entity, message);
                        if (callback) callback({
                            error: message,
                            userState: userState
                        });
                        return;
                    }
                }
            }
            for (var att in entity) {
                if (typeof entity[att] === "undefined" || entity[att] === null) {
                    delete entity[att];
                }
            }
            Mobile.Sdk.core.execute("createEntity", this.objecttypename, entity, callback, executionOptions, userState);
        };
        this.update = function(entity, callback, executionOptions, userState) {
            var message;
            if (typeof userState === "undefined") userState = null;
            executionOptions = executionOptions || new Mobile.Sdk.core.entitymanager.ExecutionOptions();
            if (arguments.length === 3) {
                if (!executionOptions.hasOwnProperty("executionLocation")) {
                    userState = executionOptions;
                    executionOptions = new Mobile.Sdk.core.entitymanager.ExecutionOptions();
                }
            } else if (arguments.length === 4) {
                if (!executionOptions.hasOwnProperty("executionLocation")) {
                    message = "ExecutionOptions is not a valid Mobile.Sdk.core.entitymanager.ExecutionOptions object.";
                    Mobile.Sdk.core.logValidationMessage("entitymanager.update", entity, message);
                    if (callback) callback({
                        error: message,
                        userState: userState
                    });
                    return;
                }
            }
            if (executionOptions.executionLocation < 1 || executionOptions.executionLocation > 4) {
                message = "ExecutionOptions.ExecutionLocation should be value between 1 and 4.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.update", entity, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (typeof entity === "undefined" || entity === null) {
                message = "Missing mandatory Entity parameter.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.update", entity, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (Object.prototype.toString.call(entity) != "[object Object]") {
                message = "Entity is not an Object.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.update", entity, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            var attCount = 0;
            for (var att in entity) {
                if (entity.hasOwnProperty(att)) attCount++;
                if (attCount === 2) break;
            }
            if (attCount < 2) {
                message = "Entity should contain at least 2 attribute (primary key and any other attribute).";
                Mobile.Sdk.core.logValidationMessage("entitymanager.update", entity, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (typeof callback === "undefined" || callback === null) {
                message = "Missing mandatory Callback parameter.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.update", callback, message);
                throw new Error(message);
            }
            if (Object.prototype.toString.call(callback) != "[object Function]") {
                message = "Callback is not a Function.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.update", callback, message);
                throw new Error(message);
            }
            if (typeof entity.statecode !== "undefined") {
                message = "Entity cannot contain field 'statecode'.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.update", entity, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (typeof entity.ownerid !== "undefined") {
                message = "Entity cannot contain field 'ownerid'.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.update", entity, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (entity.statuscode === null) {
                message = "Entity cannot contain field 'statuscode' with value null.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.update", entity, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (entity.documentbody === null && typeof entity.filename === "undefined") {
                entity.filename = null;
            }
            Mobile.Sdk.core.execute("updateEntity", this.objecttypename, entity, callback, executionOptions, userState);
        };
        this.delete = function(id, callback, executionOptions, userState) {
            var message;
            if (typeof userState === "undefined") userState = null;
            executionOptions = executionOptions || new Mobile.Sdk.core.entitymanager.ExecutionOptions();
            if (arguments.length === 3) {
                if (!executionOptions.hasOwnProperty("executionLocation")) {
                    userState = executionOptions;
                    executionOptions = new Mobile.Sdk.core.entitymanager.ExecutionOptions();
                }
            } else if (arguments.length === 4) {
                if (!executionOptions.hasOwnProperty("executionLocation")) {
                    message = "ExecutionOptions is not a valid Mobile.Sdk.core.entitymanager.ExecutionOptions object.";
                    Mobile.Sdk.core.logValidationMessage("entitymanager.delete", id, message);
                    if (callback) callback({
                        error: message,
                        userState: userState
                    });
                    return;
                }
            }
            if (executionOptions.executionLocation < 1 || executionOptions.executionLocation > 4) {
                message = "ExecutionOptions.ExecutionLocation should be value between 1 and 4.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.delete", id, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (typeof id === "undefined" || id === null) {
                message = "Missing mandatory Id parameter.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.delete", id, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (Object.prototype.toString.call(id) != "[object String]") {
                message = "Id is not a String.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.delete", id, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (/^(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}$/.test(id) === false) {
                message = "Id doesn't seem to be a valid GUID.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.delete", id, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (typeof callback === "undefined" || callback === null) {
                message = "Missing mandatory Callback parameter.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.delete", callback, message);
                throw new Error(message);
            }
            if (Object.prototype.toString.call(callback) != "[object Function]") {
                message = "Callback is not a Function.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.delete", callback, message);
                throw new Error(message);
            }
            Mobile.Sdk.core.execute("deleteEntity", this.objecttypename, id, callback, executionOptions, userState);
        };
        this.setState = function(id, stateCode, statusCode, callback, executionOptions, userState) {
            var message;
            if (typeof userState === "undefined") userState = null;
            executionOptions = executionOptions || new Mobile.Sdk.core.entitymanager.ExecutionOptions();
            if (arguments.length === 5) {
                if (!executionOptions.hasOwnProperty("executionLocation")) {
                    userState = executionOptions;
                    executionOptions = new Mobile.Sdk.core.entitymanager.ExecutionOptions();
                }
            } else if (arguments.length === 6) {
                if (!executionOptions.hasOwnProperty("executionLocation")) {
                    message = "ExecutionOptions is not a valid Mobile.Sdk.core.entitymanager.ExecutionOptions object.";
                    Mobile.Sdk.core.logValidationMessage("entitymanager.setState", id, message);
                    if (callback) callback({
                        error: message,
                        userState: userState
                    });
                    return;
                }
            }
            if (executionOptions.executionLocation < 1 || executionOptions.executionLocation > 4) {
                message = "ExecutionOptions.ExecutionLocation should be value between 1 and 4.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.setState", id, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (typeof id === "undefined" || id === null) {
                message = "Missing mandatory Id parameter.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.setState", id, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (Object.prototype.toString.call(id) != "[object String]") {
                message = "Id is not a String.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.setState", id, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (/^(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}$/.test(id) === false) {
                message = "Id doesn't seem to be a valid GUID.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.setState", id, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (Object.prototype.toString.call(stateCode) != "[object Number]" || isNaN(stateCode)) {
                message = "StateCode is not a Number.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.setState", stateCode, message);
                if (callback) callback({
                    error: message
                });
                return;
            }
            if (typeof statusCode === "undefined" || statusCode === null) {
                statusCode = -1;
            }
            if (Object.prototype.toString.call(statusCode) != "[object Number]" || isNaN(statusCode)) {
                message = "StatusCode is not a Number.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.setState", statusCode, message);
                if (callback) callback({
                    error: message
                });
                return;
            }
            if (this.objecttypename === "opportunity" || this.objecttypename === "incident") {
                if (stateCode !== 0) {
                    message = "Entities 'opportunity' and 'incident' can only be set to 0.";
                    Mobile.Sdk.core.logValidationMessage("entitymanager.setState", stateCode, message);
                    if (callback) callback({
                        error: message
                    });
                    return;
                }
            }
            if (this.objecttypename === "email") {
                message = "SetState is not valid for entity 'email'.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.setState", stateCode, message);
                if (callback) callback({
                    error: message
                });
                return;
            }
            if (typeof callback === "undefined" || callback === null) {
                message = "Missing mandatory Callback parameter.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.setState", callback, message);
                throw new Error(message);
            }
            if (Object.prototype.toString.call(callback) != "[object Function]") {
                message = "Callback is not a Function.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.setState", callback, message);
                throw new Error(message);
            }
            Mobile.Sdk.core.execute("setStateEntity", this.objecttypename, id, stateCode, statusCode, callback, executionOptions, userState);
        };
        this.retrieve = function(id, columnset, callback, executionOptions, userState) {
            var message;
            if (typeof userState === "undefined") userState = null;
            executionOptions = executionOptions || new Mobile.Sdk.core.entitymanager.ExecutionOptions();
            if (arguments.length === 4) {
                if (!executionOptions.hasOwnProperty("executionLocation")) {
                    userState = executionOptions;
                    executionOptions = new Mobile.Sdk.core.entitymanager.ExecutionOptions();
                }
            } else if (arguments.length === 5) {
                if (!executionOptions.hasOwnProperty("executionLocation")) {
                    message = "ExecutionOptions is not a valid Mobile.Sdk.core.entitymanager.ExecutionOptions object.";
                    Mobile.Sdk.core.logValidationMessage("entitymanager.retrieve", id, message);
                    if (callback) callback({
                        error: message,
                        userState: userState
                    });
                    return;
                }
            }
            if (executionOptions.executionLocation !== 1 && executionOptions.executionLocation !== 2 && executionOptions.executionLocation !== 4) {
                message = "ExecutionOptions.ExecutionLocation should be 1, 2 or 4.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.retrieve", id, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (typeof id === "undefined" || id === null) {
                message = "Missing mandatory Id parameter.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.retrieve", id, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (Object.prototype.toString.call(id) != "[object String]") {
                message = "Id is not a String.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.retrieve", id, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (/^(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}$/.test(id) === false) {
                message = "Id doesn't seem to be a valid GUID.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.retrieve", id, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (typeof columnset === "undefined") {
                message = "Missing mandatory Columnset parameter.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.retrieve", columnset, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (columnset !== null) {
                if (Object.prototype.toString.call(columnset) != "[object Array]") {
                    message = "Columnset is not an Array.";
                    Mobile.Sdk.core.logValidationMessage("entitymanager.retrieve", columnset, message);
                    if (callback) callback({
                        error: message,
                        userState: userState
                    });
                    return;
                }
                for (var i = 0; i < columnset.length; i++) {
                    if (typeof columnset[i] === "undefined" || columnset[i] === null) {
                        message = "Columnset[" + i + "] has no value.";
                        Mobile.Sdk.core.logValidationMessage("entitymanager.retrieve", columnset, message);
                        if (callback) callback({
                            error: message,
                            userState: userState
                        });
                        return;
                    }
                    if (Object.prototype.toString.call(columnset[i]) != "[object String]") {
                        message = "Columnset[" + i + "] is not a String.";
                        Mobile.Sdk.core.logValidationMessage("entitymanager.retrieve", columnset, message);
                        if (callback) callback({
                            error: message,
                            userState: userState
                        });
                        return;
                    }
                }
                if (columnset.length === 0) columnset = null;
            }
            if (typeof callback === "undefined" || callback === null) {
                message = "Missing mandatory Callback parameter.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.retrieve", callback, message);
                throw new Error(message);
            }
            if (Object.prototype.toString.call(callback) != "[object Function]") {
                message = "Callback is not a Function.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.retrieve", callback, message);
                throw new Error(message);
            }
            Mobile.Sdk.core.execute("retrieveEntity", this.objecttypename, id, columnset, callback, executionOptions, userState);
        };
        this.retrieveMultiple = function(fetchXml, callback, executionOptions, userState) {
            var message;
            if (typeof userState === "undefined") userState = null;
            executionOptions = executionOptions || new Mobile.Sdk.core.entitymanager.ExecutionOptions();
            if (arguments.length === 3) {
                if (!executionOptions.hasOwnProperty("executionLocation")) {
                    userState = executionOptions;
                    executionOptions = new Mobile.Sdk.core.entitymanager.ExecutionOptions();
                }
            } else if (arguments.length === 4) {
                if (!executionOptions.hasOwnProperty("executionLocation")) {
                    message = "ExecutionOptions is not a valid Mobile.Sdk.core.entitymanager.ExecutionOptions object.";
                    Mobile.Sdk.core.logValidationMessage("entitymanager.retrieveMultiple", fetchXml, message);
                    if (callback) callback({
                        error: message,
                        userState: userState
                    });
                    return;
                }
            }
            if (executionOptions.executionLocation !== 1 && executionOptions.executionLocation !== 2 && executionOptions.executionLocation !== 4) {
                message = "ExecutionOptions.ExecutionLocation should be 1, 2 or 4.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.retrieveMultiple", fetchXml, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (typeof fetchXml === "undefined" || fetchXml === null) {
                message = "Missing mandatory FetchXml parameter.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.retrieveMultiple", fetchXml, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (Object.prototype.toString.call(fetchXml) != "[object String]") {
                message = "FetchXml is not a String.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.retrieveMultiple", fetchXml, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (fetchXml.trim() === "") {
                message = "Missing mandatory FetchXml parameter.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.retrieveMultiple", fetchXml, message);
                if (callback) callback({
                    error: message,
                    userState: userState
                });
                return;
            }
            if (typeof callback === "undefined" || callback === null) {
                message = "Missing mandatory Callback parameter.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.retrieveMultiple", callback, message);
                throw new Error(message);
            }
            if (Object.prototype.toString.call(callback) != "[object Function]") {
                message = "Callback is not a Function.";
                Mobile.Sdk.core.logValidationMessage("entitymanager.retrieveMultiple", callback, message);
                throw new Error(message);
            }
            if (window.DOMParser) {
                var parser = new DOMParser();
                var fetchDoc;
                try {
                    fetchDoc = parser.parseFromString(fetchXml, "text/xml");
                    message = "FetchXml is not a valid XML document.";
                    if (fetchDoc.getElementsByTagName("parsererror").length > 0) {
                        throw new Error(message);
                    }
                } catch (err) {
                    message = "FetchXml is not a valid XML document.";
                    Mobile.Sdk.core.logValidationMessage("entitymanager.retrieveMultiple", fetchXml, message);
                    if (callback) callback({
                        error: message,
                        userState: userState
                    });
                    return;
                }
                var linkEntities = fetchDoc.getElementsByTagName("link-entity");
                for (i = 0; i < linkEntities.length; i++) {
                    if (linkEntities[i].getElementsByTagName("link-entity").length > 0) {
                        message = "FetchXml is not valid: Only one level of link-entity is supported.";
                        Mobile.Sdk.core.logValidationMessage("entitymanager.retrieveMultiple", fetchXml, message);
                        if (callback) callback({
                            error: message,
                            userState: userState
                        });
                        return;
                    }
                }
                for (i = 0; i < linkEntities.length; i++) {
                    if (linkEntities[i].getElementsByTagName("attribute").length > 0 || linkEntities[i].getElementsByTagName("all-attributes").length > 0) {
                        message = "FetchXml is not valid: Link-entity cannot contain attributes.";
                        Mobile.Sdk.core.logValidationMessage("entitymanager.retrieveMultiple", fetchXml, message);
                        if (callback) callback({
                            error: message,
                            userState: userState
                        });
                        return;
                    }
                }
                if (fetchDoc.documentElement.getAttribute("aggregate")) {
                    message = "FetchXml is not valid: Aggregates are not supported.";
                    Mobile.Sdk.core.logValidationMessage("entitymanager.retrieveMultiple", fetchXml, message);
                    if (callback) callback({
                        error: message,
                        userState: userState
                    });
                    return;
                }
                if (!fetchDoc.documentElement.getAttribute("count")) {
                    fetchDoc.documentElement.setAttribute("count", "20");
                }
                if (fetchDoc.documentElement.getAttribute("count") == "0") {
                    message = "FetchXml is not valid: count=0 is not supported.";
                    Mobile.Sdk.core.logValidationMessage("entitymanager.retrieveMultiple", fetchXml, message);
                    if (callback) callback({
                        error: message,
                        userState: userState
                    });
                    return;
                }
                if (!fetchDoc.documentElement.getAttribute("page")) {
                    fetchDoc.documentElement.setAttribute("page", "1");
                }
                if (fetchDoc.documentElement.getAttribute("page") == "0") {
                    message = "FetchXml is not valid: page=0 is not supported.";
                    Mobile.Sdk.core.logValidationMessage("entitymanager.retrieveMultiple", fetchXml, message);
                    if (callback) callback({
                        error: message,
                        userState: userState
                    });
                    return;
                }
                var entity = fetchDoc.getElementsByTagName("entity")[0];
                if (entity.getElementsByTagName("attribute").length === 0 && entity.getElementsByTagName("all-attributes").length === 0) {
                    message = "FetchXml is not valid: Missing attribute or all-attributes.";
                    Mobile.Sdk.core.logValidationMessage("entitymanager.retrieveMultiple", fetchXml, message);
                    if (callback) callback({
                        error: message,
                        userState: userState
                    });
                    return;
                }
                var fetchEntityName = entity.getAttribute("name");
                if (this.objecttypename !== fetchEntityName) {
                    message = "FetchXml is not valid: entitymanager entityname is not equal to fetch entityname.";
                    Mobile.Sdk.core.logValidationMessage("entitymanager.retrieveMultiple", fetchXml, message);
                    if (callback) callback({
                        error: message,
                        userState: userState
                    });
                    return;
                }
                fetchXml = fetchDoc.xml ? fetchDoc.xml : new XMLSerializer().serializeToString(fetchDoc);
            }
            Mobile.Sdk.core.execute("retrieveMultiple", this.objecttypename, fetchXml, callback, executionOptions, userState);
        };
    }
};

Mobile.Sdk.core.entitymanager.ExecutionOptions = function(location) {
    this.executionLocation = location || Mobile.Sdk.core.entitymanager.ExecutionLocation.DEFAULT;
};

Mobile.Sdk.core.entitymanager.ExecutionLocation = {
    DEFAULT: 1,
    REMOTE_ONLY: 2,
    LOCAL_AND_REMOTE: 3,
    LOCAL_ONLY: 4
};

Mobile.namespace("Sdk.core.ui");

Mobile.Sdk.core.ui.openEntityForm = function(options, callback) {
    var message, args;
    callback = typeof callback === "undefined" ? null : callback;
    if (callback !== null && Object.prototype.toString.call(callback) != "[object Function]") {
        message = "callback is not a Function.";
        Mobile.Sdk.core.logValidationMessage("core.ui.openEntityForm", callback, message);
        throw new Error(message);
    }
    if (typeof options === "undefined" || options === null) {
        message = "Missing mandatory options parameter.";
        Mobile.Sdk.core.logValidationMessage("core.ui.openEntityForm", options, message);
        if (callback) callback({
            error: message
        });
        return;
    }
    if (Object.prototype.toString.call(options) != "[object Object]") {
        message = "options is not a Object.";
        Mobile.Sdk.core.logValidationMessage("core.ui.openEntityForm", options, message);
        if (callback) callback({
            error: message
        });
        return;
    }
    if (callback === null && typeof options.userState !== "undefined" && options.userState !== null) {
        Mobile.Sdk.core.logValidationMessage("core.ui.openEntityForm", options.userState, "You are passing a options.userState, but not a valid callback function. The passed options.userState will be ignored.");
        delete options.userState;
    }
    if (typeof options.entitytypename === "undefined" || options.entitytypename === null) {
        message = "Missing mandatory options.entitytypename parameter.";
        Mobile.Sdk.core.logValidationMessage("core.ui.openEntityForm", options.entitytypename, message);
        if (callback) callback({
            error: message,
            userState: options.userState
        });
        return;
    }
    if (Object.prototype.toString.call(options.entitytypename) != "[object String]") {
        message = "options.entitytypename is not a String.";
        Mobile.Sdk.core.logValidationMessage("core.ui.openEntityForm", options.entitytypename, message);
        if (callback) callback({
            error: message,
            userState: options.userState
        });
        return;
    }
    if (options.entitytypename.trim() === "") {
        message = "Missing mandatory options.entitytypename parameter.";
        Mobile.Sdk.core.logValidationMessage("core.ui.openEntityForm", options.entitytypename, message);
        if (callback) callback({
            error: message,
            userState: options.userState
        });
        return;
    }
    options.entitytypename = options.entitytypename.toLowerCase();
    options.id = typeof options.id === "undefined" ? null : options.id;
    if (options.id !== null) {
        if (Object.prototype.toString.call(options.id) != "[object String]") {
            message = "options.id is not a String.";
            Mobile.Sdk.core.logValidationMessage("core.ui.openEntityForm", options.id, message);
            if (callback) callback({
                error: message,
                userState: options.userState
            });
            return;
        }
        if (/^(\{){0,1}[0-9a-fA-F]{8}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{4}\-[0-9a-fA-F]{12}(\}){0,1}$/.test(options.id) === false) {
            message = "options.id doesn't seem to be a valid GUID.";
            Mobile.Sdk.core.logValidationMessage("core.ui.openEntityForm", options.id, message);
            if (callback) callback({
                error: message,
                userState: options.userState
            });
            return;
        }
        if (Object.prototype.toString.call(options.entity) === "[object Object]") {
            message = "You are passing a valid options.id and an options.entity object. Ignoring the options.entity object and trying to open the existing record.";
            Mobile.Sdk.core.logValidationMessage("core.ui.openEntityForm", options.entity, message);
            delete options.entity;
        }
    }
    if (typeof options.entity !== "undefined" && options.entity !== null) {
        if (Object.prototype.toString.call(options.entity) != "[object Object]") {
            message = "options.entity is not an Object.";
            Mobile.Sdk.core.logValidationMessage("core.ui.openEntityForm", options.entity, message);
            if (callback) callback({
                error: message,
                userState: options.userState
            });
            return;
        }
    }
    if (typeof options.workMode === "undefined" || options.workMode === null) {
        message = "options.workMode is not an Object.";
        Mobile.Sdk.core.logValidationMessage("core.ui.openEntityForm", options.workMode, message);
        if (callback) callback({
            error: message,
            userState: options.userState
        });
        return;
    }
    if (options.workMode !== 1 && options.workMode !== 2 && options.workMode !== 3) {
        message = "options.workMode should be 1, 2 or 3.";
        Mobile.Sdk.core.logValidationMessage("core.ui.openEntityForm", options.workMode, message);
        if (callback) callback({
            error: message,
            userState: options.userState
        });
        return;
    }
    Mobile.Sdk.core.execute("mobileSdkcoreuiOpenEntityForm", options, callback);
};

Mobile.Sdk.core.ui.WorkMode = {
    DEFAULT: 1,
    OFFLINE: 2,
    ONLINE: 3
};

// RESCO
if (typeof Xrm == "undefined" || !Xrm) {
    var Xrm = Mobile;
}